{"version":3,"sources":["Tab.js","App.js","serviceWorker.js","index.js"],"names":["Tab","useState","loaded","setLoaded","loading","setLoading","title","setTitle","artist","setArtist","tab","setTab","id","useParams","useEffect","axios","get","then","response","data","catch","error","console","log","TopNav","className","to","Tabs","TabLink","props","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qSAoDeA,MA/Cf,WAAgB,IAAD,EACeC,oBAAS,GADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,oBAAS,GAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGaJ,mBAAS,MAHtB,mBAGNK,EAHM,KAGCC,EAHD,OAIeN,mBAAS,MAJxB,mBAINO,EAJM,KAIEC,EAJF,OAKSR,mBAAS,MALlB,mBAKNS,EALM,KAKDC,EALC,KAMLC,EAAOC,cAAPD,GAsBR,OApBAE,qBAAU,YACHF,GAAMV,GAAUE,IAIrBC,GAAW,GAEXU,IAAMC,IAAN,oBAAuBJ,IAAMK,MAAK,SAAAC,GAChC,IAAMC,EAAOD,EAASC,KAEtBZ,EAASY,EAAKb,OACdG,EAAUU,EAAKX,QACfG,EAAOQ,EAAKT,KACZP,GAAU,GACVE,GAAW,MACVe,OAAM,SAAAC,GACPC,QAAQC,IAAIF,SAEb,CAACnB,EAAQE,EAASQ,IAGnB,6BACE,mCAASA,IAENV,GACD,0CAEAA,GACA,oCACE,sCAAYI,GACZ,uCAAaE,GACb,oCACA,6BAAME,M,OChBhB,SAASc,IACP,OACE,4BAAQC,UAAU,cAChB,kBAAC,IAAD,CAAMC,GAAG,KAAT,YAKN,SAASC,IACP,OACE,4BACE,4BACE,kBAACC,EAAD,CAAShB,GAAG,WAAWJ,OAAO,cAAcF,MAAM,cAEpD,4BACE,kBAACsB,EAAD,CAAShB,GAAG,WAAWJ,OAAO,UAAUF,MAAM,UAMtD,SAASsB,EAAQC,GAAQ,IAChBjB,EAAqBiB,EAArBjB,GAAIN,EAAiBuB,EAAjBvB,MAAOE,EAAUqB,EAAVrB,OAElB,OACE,kBAAC,IAAD,CAAMkB,GAAE,gBAAWd,IAAON,EAA1B,MAAoCE,GAIzBsB,MAhDf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKL,UAAU,OACb,kBAACD,EAAD,MAEA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOO,OAAK,EAACC,KAAK,KAChB,kBAACL,EAAD,OAEF,kBAAC,IAAD,CAAOK,KAAK,aACV,kBAAC,EAAD,WCTQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd3B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM2B,c","file":"static/js/main.3741d9f1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport axios from 'axios';\nimport './Tab.scss';\n\nfunction Tab() {\n  const [loaded, setLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [title, setTitle] = useState(null);\n  const [artist, setArtist] = useState(null);\n  const [tab, setTab] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    if (!id || loaded || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    axios.get(`/api/tabs/${id}`).then(response => {\n      const data = response.data;\n\n      setTitle(data.title);\n      setArtist(data.artist);\n      setTab(data.tab);\n      setLoaded(true);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n    });\n  }, [loaded, loading, id]);\n\n  return (\n    <div>\n      <h3>ID: {id}</h3>\n\n      { !loaded &&\n        <h3>Loading...</h3>\n      }\n      { loaded &&\n        <>\n          <h3>Title: {title}</h3>\n          <h3>Artist: {artist}</h3>\n          <h3>Tab:</h3>\n          <pre>{tab}</pre>\n        </>\n      }\n    </div>\n  );\n}\n\nexport default Tab;\n","import React from 'react';\nimport './App.scss';\nimport Tab from './Tab';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <TopNav />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Tabs />\n          </Route>\n          <Route path=\"/tabs/:id\">\n            <Tab />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction TopNav() {\n  return (\n    <header className=\"app-header\">\n      <Link to=\"/\">tabster</Link>\n    </header>\n  );\n}\n\nfunction Tabs() {\n  return (\n    <ul>\n      <li>\n        <TabLink id=\"lipgloss\" artist=\"Charlie XCX\" title=\"Lipgloss\"/>\n      </li>\n      <li>\n        <TabLink id=\"test-123\" artist=\"Testing\" title=\"123\"/>\n      </li>\n    </ul>\n  );\n}\n\nfunction TabLink(props) {\n  const {id, title, artist} = props;\n\n  return (\n    <Link to={`/tabs/${id}`}>{title} - {artist}</Link>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}