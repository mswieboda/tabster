{"version":3,"sources":["TabLink.js","ArtistTabs.js","Tabs.js","Tab.js","App.js","serviceWorker.js","index.js"],"names":["TabLink","artist","title","text","to","ArtistTabs","useState","loaded","setLoaded","loading","setLoading","error","setError","tabs","setTabs","params","useParams","useEffect","axios","get","then","response","data","catch","console","log","message","length","map","tab","key","id","Tabs","Tab","setTitle","setArtist","setTab","TopNav","className","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b44af008.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction TabLink({ artist, title, text = title }) {\n  return (\n    <Link to={`/tabs/${artist}/${title}`}>{text}</Link>\n  );\n}\n\nexport default TabLink;\n","import React, { useState, useEffect } from 'react';\nimport {\n  useParams,\n} from 'react-router-dom';\nimport axios from 'axios';\nimport TabLink from './TabLink';\n\nfunction ArtistTabs() {\n  const [loaded, setLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tabs, setTabs] = useState([]);\n  const params = useParams();\n\n  useEffect(() => {\n    if (loaded || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    axios.get(`/api/tabs/${params.artist}`).then(response => {\n      setTabs(response.data);\n\n      setLoaded(true);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setLoaded(true);\n      setLoading(false);\n      setError(error.message);\n    });\n  }, [loaded, loading, params.artist]);\n\n  return (\n    <div>\n      <h3>{params.artist}</h3>\n      {loading &&\n        <p>\n          Loading...\n        </p>\n      }\n      {\n        error &&\n        <p>\n          {error}\n        </p>\n      }\n      <ul>\n        {\n          !!tabs.length && tabs.map(tab => {\n            return (\n              <li key={tab.id}>\n                <TabLink artist={tab.artist} title={tab.title} />\n              </li>\n            );\n          })\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default ArtistTabs;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport TabLink from './TabLink';\n\nfunction Tabs() {\n  const [loaded, setLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tabs, setTabs] = useState([]);\n\n  useEffect(() => {\n    if (loaded || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    axios.get('/api/tabs').then(response => {\n      setTabs(response.data);\n\n      setLoaded(true);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setLoaded(true);\n      setLoading(false);\n      setError(error.message);\n    });\n  }, [loaded, loading]);\n\n  if (!loaded) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (error) {\n    return <h3>{error}</h3>;\n  }\n\n  return (\n    <ul>\n      {\n        tabs.length && tabs.map(tab => {\n          return (\n            <li key={tab.id}>\n              <TabLink artist={tab.artist} title={tab.title} text={`${tab.title} - ${tab.artist}`} />\n            </li>\n          );\n        })\n      }\n    </ul>\n  );\n}\n\nexport default Tabs;\n","import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport TabLink from './TabLink';\nimport './Tab.scss';\n\nfunction Tab() {\n  const [loaded, setLoaded] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [title, setTitle] = useState(null);\n  const [artist, setArtist] = useState(null);\n  const [tab, setTab] = useState(null);\n  const params = useParams();\n\n  useEffect(() => {\n    if (!params.artist || !params.title || loaded || loading) {\n      return;\n    }\n\n    setLoading(true);\n\n    axios.get(`/api/tabs/${params.artist}/${params.title}`).then(response => {\n      const data = response.data;\n\n      setTitle(data.title);\n      setArtist(data.artist);\n      setTab(data.tab);\n      setLoaded(true);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n      setLoaded(true);\n      setLoading(false);\n      setError(error.message);\n    });\n  }, [loaded, loading, params.artist, params.title]);\n\n  if (!loaded) {\n    return <h3>Loading...</h3>;\n  }\n\n  if (error) {\n    return <h3>{error}</h3>;\n  }\n\n  return (\n    <div>\n      <p>\n        Title:{' '}\n        <TabLink artist={artist} title={title} />\n      </p>\n      <p>\n        Artist:{' '}\n        <Link to={`/tabs/${artist}`}>{artist}</Link>\n      </p>\n      <p>Tab:</p>\n      <pre>{tab}</pre>\n    </div>\n  );\n}\n\nexport default Tab;\n","import React from 'react';\nimport './App.scss';\nimport ArtistTabs from './ArtistTabs';\nimport Tabs from './Tabs';\nimport Tab from './Tab';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect,\n} from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <TopNav />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Redirect to=\"/tabs\" />\n          </Route>\n          <Route path=\"/tabs\">\n            <Switch>\n              <Route exact path=\"/tabs\" component={Tabs}/>\n              <Route path=\"/tabs/:artist\">\n                <Switch>\n                  <Route exact path=\"/tabs/:artist\" component={ArtistTabs}/>\n                  <Route exact path=\"/tabs/:artist/:title\" component={Tab}/>\n                </Switch>\n              </Route>\n            </Switch>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nfunction TopNav() {\n  return (\n    <header className=\"app-header\">\n      <Link to=\"/\">tabster</Link>\n    </header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}